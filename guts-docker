#!/bin/bash
set -euo pipefail

# check for running container
if [[ -z $(docker compose ps -q guts) ]]; then
    echo 'Make sure the guts container is up by running the following command:'
    echo '$ docker compose up -d guts'
    exit 1
fi

dce="docker compose exec -T guts"
cmd="${1-help}"; shift || true
case $cmd in
    (help)
        cut -c13- <<'        EOF'
            Usage: guts-docker <command> <args>...

            Available commands:

              help
                       print this help screen
              bash|sh|shell [arguments...]
                       run a shell in the guts container
        EOF
        $dce ./guts help | tail +4
        cut -c13- <<'        EOF'
              kill     <config-file>
                       kill a running test daemon immediately
              list|status
                       show status of running test daemons
              check|restart
                       restart failed daemons
        EOF
        ;;
    (bash|sh|shell)
        # invoke shell or guts command directly
        exec docker compose exec guts /bin/bash "$@"
        ;;
    (start)
        # run test command protected by daemons script
        exec $dce ./daemons run ./guts start "$@"
        ;;
    (kill)
        # stop running testd command protected by daemons script
        exec $dce ./daemons kill ./guts start "$@"
        ;;
    (list|status)
        # invoke daemons utility
        exec $dce ./daemons status
        ;;
    (check|restart)
        # invoke daemons utility
        exec $dce ./daemons check
        ;;
    (*)
        # run all other commands with guts, without allocating a terminal
        # (allows forwarding of stdin)
        exec $dce ./guts "$cmd" "$@"
        ;;
esac
