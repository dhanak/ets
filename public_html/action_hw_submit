<%doc> This is a -*- mason -*- template.
Submit a homework file for a student.
</%doc>

<%args>
$conf => "env/submit.conf"
$class
$file
$fname => $file
$neptun => undef
</%args>

<%once>
use IO::Socket::INET;

my ($error, $fh, $input, $name, $response, $socket);
</%once>

<%init>;
if (!$m->comp('/sub/check_perm', item => "hw_submit") ||
    ($neptun && !$m->comp('/sub/is_supervisor', neptun => $neptun)
     && !$m->comp('/sub/is_admin'))) {
    $data->{MSG} = "Nem vagy jogosult HF beadására!";
    redirect("news");
} else {
    $fh = $m->cgi_object->upload('file');
    $input = join "", <$fh>;
    close $fh;

    if (length $input == 0) {
        $response = "Hiányzó vagy 0 byte hosszúságú file!";
        $error = 1;
    } else {
        $fname =~ s@^.*[\\/]@@;
        $name = $m->comp('/sub/canonical_name', $neptun ? (neptun => $neptun) : ());
        $socket = new IO::Socket::INET(PeerAddr => $ENV{GUTS_SERVER}, Proto => 'tcp')
            or die "Can't open socket to $ENV{GUTS_SERVER}";
        binmode $socket, ":encoding(utf-8)";
        print $socket "submit 'work/$conf' '$class' '$name'\n";
        # uuencode input
        print $socket "begin 644 $fname\n" . pack('u', $input) . "end\n";
        # send EOF (shut down for writing)
        $socket->shutdown(SHUT_WR);
        # read entire output into $response
        local $/;
        $response = <$socket>;
        $error = ($response =~ /^!/);
        $socket->close();
    }
    if ($error) {
        $data->{MSG} = "<span class=bad>Sikertelen HF beadás</span>";
        $data->{ERROR} = $response;
    } else {
        $data->{MSG} = "<span class=good>Sikeres HF beadás $fname néven</span>";
        $data->{OUTPUT} = $response;
    }
    redirect("hw_submit", neptun => $neptun);
}
</%init>
