#!/bin/bash
set -euo pipefail

USAGE="
Usage: $(basename "$0") <command> [args...]

Where <command> is one of
  help   - present this help page
  status - list all guarded daemons (that should be running)
  check  - check for running daemons and restart those not running
  run    - run a protected daemon
  kill   - kill a protected daemon
"

HEADER="# daemon runner process file"
INFDIR="${GUTS_WORK_DIR-${HOME}}/daemons"
hash mawk 2>/dev/null && AWK="mawk -W interactive" || AWK="gawk"

# main functions

checkcmd() {
    local command
    local cmdfile="/proc/$1/cmdline"; shift
    if [[ -f "${cmdfile}" ]]; then
        readarray -d '' command <"${cmdfile}"
        [[ "${*@Q}" == "${command[*]@Q}" ]] && return 0
    fi
    return 1
}

inffile() {
    local head
    [[ -f "$1" ]] || return 1
    read -r head <"$1"
    if [[ "${head}" != "${HEADER}" ]]; then
        echo "Deleting corrupted file $1" >&2
        rm "$1"
        return 1
    fi
    return 0
}

status() {
    local command inffile pid wd
    echo -e '\e[3;35m❤    UUID (file name base)                   Command\e[0m'
    for inffile in "${INFDIR}"/*.inf; do
        inffile "${inffile}" || continue
        source "${inffile}"     # sets command, pid & wd
        if checkcmd "${pid}" "${command[@]}"; then
            echo -en '\e[1;32m✔\e[0m'
        else
            echo -en '\e[1;31m✘\e[0m'
        fi
        echo -e "    \e[34m$(basename "${inffile}" .inf)\e[0m    ${command[*]@Q}"
    done
}

check() {
    local command inffile pid wd
    for inffile in "${INFDIR}"/*.inf; do
        inffile "${inffile}" || continue
        source "${inffile}"     # sets command, pid & wd
        if ! checkcmd "${pid}" "${command[@]}"; then
            echo "Restarting ${command[*]@Q}" >&2
            rm "${inffile}"
            (cd "$wd" && start "${command[@]}")
        fi
    done
}

start() {
    local base
    base="${INFDIR}/$(uuidgen)"
    start_ "${base}.inf" "$@" |
        $AWK '{ print strftime("[%F %T %Z]"), $0; }' >"${base}.log" &
    echo "Command started, output redirected to ${base}.log" >&2
    sleep 0.2
}

start_() {
    local cmdfile command inffile pid wd
    inffile="$1"; shift
    echo "+ ${*@Q}"             # print command in bash -x form
    "$@" </dev/null 2>&1 &      # run main command in background
    sleep 0.1                   # wait for command to settle in
    pid=$!
    cmdfile="/proc/${pid}/cmdline"
    if [[ -f "${cmdfile}" ]]; then
        readarray -d '' command <"${cmdfile}"
        wd="${PWD}"
        echo -e "${HEADER}\n${command[*]@A}\n${pid@A}\n${wd@A}" >"${inffile}"
        wait "${pid}"
        rm "${inffile}"
    else
        echo "Process not found, command terminated already?" >&2
    fi
}

stop() {
    local command inffile pid wd
    for inffile in "${INFDIR}"/*.inf; do
        inffile "${inffile}" || continue
        source "${inffile}"     # sets command, pid & wd
        if [[ "$*" == "$(basename "${inffile}" .inf)" ||
                  "${*@Q}" == "${command[*]@Q}" ]]; then
            if checkcmd "${pid}" "${command[@]}"; then
                echo "Stopping command '$*'" >&2
                kill "${pid}" || true
            fi
            rm "${inffile}"
            return 0
        fi
    done
    echo "Daemon running command ${*@Q} not found!" >&2
}

mkdir -p "${INFDIR}"
cmd="${1-help}"; shift || true
case "${cmd}" in
    (help)        echo "$USAGE" ;;
    (list|status) status "$@" ;;
    (check)       check "$@" ;;
    (start|run)   start "$@" ;;
    (stop|kill)   stop "$@" ;;
    (*)           echo "$(basename "$0"): unknown command: $cmd"; exit 1 ;;
esac
